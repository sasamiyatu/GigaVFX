// original -> http://staffwww.itn.liu.se/~stegu/aqsis/aqsis-newnoise/sdnoise1234.c

static const int perm[512] = {
    151,160,137,91,90,15,
    131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,
    190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,
    88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,
    77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,
    102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,
    135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,
    5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,
    223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,
    129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,
    251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,
    49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,
    138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,
    151,160,137,91,90,15,
    131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,
    190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,
    88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,
    77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,
    102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,
    135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,
    5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,
    223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,
    129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,
    251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,
    49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,
    138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180 
};

// 32 tesseract edges
static const float4 grad4lut[32] = {
    float4( 0.0, 1.0, 1.0, 1.0),float4( 0.0, 1.0, 1.0,-1.0),float4( 0.0, 1.0,-1.0, 1.0),float4( 0.0, 1.0,-1.0,-1.0), 
    float4( 0.0,-1.0, 1.0, 1.0),float4( 0.0,-1.0, 1.0,-1.0),float4( 0.0,-1.0,-1.0, 1.0),float4( 0.0,-1.0,-1.0,-1.0),
    float4( 1.0, 0.0, 1.0, 1.0),float4( 1.0, 0.0, 1.0,-1.0),float4( 1.0, 0.0,-1.0, 1.0),float4( 1.0, 0.0,-1.0,-1.0),
    float4(-1.0, 0.0, 1.0, 1.0),float4(-1.0, 0.0, 1.0,-1.0),float4(-1.0, 0.0,-1.0, 1.0),float4(-1.0, 0.0,-1.0,-1.0),
    float4( 1.0, 1.0, 0.0, 1.0),float4( 1.0, 1.0, 0.0,-1.0),float4( 1.0,-1.0, 0.0, 1.0),float4( 1.0,-1.0, 0.0,-1.0),
    float4(-1.0, 1.0, 0.0, 1.0),float4(-1.0, 1.0, 0.0,-1.0),float4(-1.0,-1.0, 0.0, 1.0),float4(-1.0,-1.0, 0.0,-1.0),
    float4( 1.0, 1.0, 1.0, 0.0),float4( 1.0, 1.0,-1.0, 0.0),float4( 1.0,-1.0, 1.0, 0.0),float4( 1.0,-1.0,-1.0, 0.0),
    float4(-1.0, 1.0, 1.0, 0.0),float4(-1.0, 1.0,-1.0, 0.0),float4(-1.0,-1.0, 1.0, 0.0),float4(-1.0,-1.0,-1.0, 0.0)
};

static const int4 simplex[64] = {
    int4(0,1,2,3),int4(0,1,3,2),int4(0,0,0,0),int4(0,2,3,1),int4(0,0,0,0),int4(0,0,0,0),int4(0,0,0,0),int4(1,2,3,0),
    int4(0,2,1,3),int4(0,0,0,0),int4(0,3,1,2),int4(0,3,2,1),int4(0,0,0,0),int4(0,0,0,0),int4(0,0,0,0),int4(1,3,2,0),
    int4(0,0,0,0),int4(0,0,0,0),int4(0,0,0,0),int4(0,0,0,0),int4(0,0,0,0),int4(0,0,0,0),int4(0,0,0,0),int4(0,0,0,0),
    int4(1,2,0,3),int4(0,0,0,0),int4(1,3,0,2),int4(0,0,0,0),int4(0,0,0,0),int4(0,0,0,0),int4(2,3,0,1),int4(2,3,1,0),
    int4(1,0,2,3),int4(1,0,3,2),int4(0,0,0,0),int4(0,0,0,0),int4(0,0,0,0),int4(2,0,3,1),int4(0,0,0,0),int4(2,1,3,0),
    int4(0,0,0,0),int4(0,0,0,0),int4(0,0,0,0),int4(0,0,0,0),int4(0,0,0,0),int4(0,0,0,0),int4(0,0,0,0),int4(0,0,0,0),
    int4(2,0,1,3),int4(0,0,0,0),int4(0,0,0,0),int4(0,0,0,0),int4(3,0,1,2),int4(3,0,2,1),int4(0,0,0,0),int4(3,1,2,0),
    int4(2,1,0,3),int4(0,0,0,0),int4(0,0,0,0),int4(0,0,0,0),int4(3,1,0,2),int4(0,0,0,0),int4(3,2,0,1),int4(3,2,1,0)
};

float4 grad4 (int hash) {
    return grad4lut[hash & 31];
}

static const float F4 = 0.309016994;
static const float G4 = 0.138196601;

float simplex_noise_4d(float4 v, out float4 d) {
  
    float n0, n1, n2, n3, n4; 
    float noise; 
    float t20, t21, t22, t23, t24;
    float t40, t41, t42, t43, t44;

    float4 vs = v + (v.x + v.y + v.z + v.w) * F4;
    int4 i = int4(floor(vs));
    float t = float(i.x + i.y + i.z + i.w) * G4; 
    float4 V0 = float4(i) - t; 
    float4 v0 = v - V0;

    int c1 = (v0.x > v0.y) ? 32 : 0;
    int c2 = (v0.x > v0.z) ? 16 : 0;
    int c3 = (v0.y > v0.z) ? 8 : 0;
    int c4 = (v0.x > v0.w) ? 4 : 0;
    int c5 = (v0.y > v0.w) ? 2 : 0;
    int c6 = (v0.z > v0.w) ? 1 : 0;
    int c = c1 | c2 | c3 | c4 | c5 | c6; 

    int4 s = simplex[c];

    int4 i1 = int4(s.x>=3?1:0,s.y>=3?1:0,s.z>=3?1:0,s.w>=3?1:0);
    int4 i2 = int4(s.x>=2?1:0,s.y>=2?1:0,s.z>=2?1:0,s.w>=2?1:0);
    int4 i3 = int4(s.x>=1?1:0,s.y>=1?1:0,s.z>=1?1:0,s.w>=1?1:0);

    float4 v1 = v0 - float4(i1) + G4;
    float4 v2 = v0 - float4(i2) + 2.0 * G4; 
    float4 v3 = v0 - float4(i3) + 3.0 * G4;
    float4 v4 = v0 - 1.0 + 4.0 * G4;

    int ii = i.x & 0xff;
    int jj = i.y & 0xff;
    int kk = i.z & 0xff;
    int ll = i.w & 0xff;

    float4 p0 = v0*v0;
    float4 p1 = v1*v1;
    float4 p2 = v2*v2;
    float4 p3 = v3*v3;
    float4 p4 = v4*v4;

    float t0 = 0.6 - p0.x-p0.y-p0.z-p0.w;
    float t1 = 0.6 - p1.x-p1.y-p1.z-p1.w;
    float t2 = 0.6 - p2.x-p2.y-p2.z-p2.w;
    float t3 = 0.6 - p3.x-p3.y-p3.z-p3.w;
    float t4 = 0.6 - p4.x-p4.y-p4.z-p4.w;

    float4 g0, g1, g2, g3, g4;

    if (t0 < 0.0) {
        n0 = t0 = t20 = t40 = 0.0;
    } else {
        t20 = t0 * t0;
        t40 = t20 * t20;
        g0 = grad4(perm[ii+perm[jj+perm[kk+perm[ll]]]]);
        n0 = t40 * dot( g0, v0 );
    }

    if (t1 < 0.0) {
        n1 = t1 = t21 = t41 = 0.0;
    } else {
        t21 = t1 * t1;
        t41 = t21 * t21;
        g1 = grad4(perm[ii+i1.x+perm[jj+i1.y+perm[kk+i1.z+perm[ll+i1.w]]]]);
        n1 = t41 * dot( g1, v1 );
    }

    if (t2 < 0.0) {
        n2 = t2 = t22 = t42 = 0.0;
    } else {
        t22 = t2 * t2;
        t42 = t22 * t22;
        g2 = grad4(perm[ii+i2.x+perm[jj+i2.y+perm[kk+i2.z+perm[ll+i2.w]]]]);
        n2 = t42 * dot( g2, v2 );
    }

    if (t3 < 0.0) {
        n3 = t3 = t23 = t43 = 0.0;
    } else {
        t23 = t3 * t3;
        t43 = t23 * t23;
        g3 = grad4(perm[ii+i3.x+perm[jj+i3.y+perm[kk+i3.z+perm[ll+i3.w]]]]);
        n3 = t43 * dot( g3, v3 );
    }

    if (t4 < 0.0) {
        n4 = t4 = t24 = t44 = 0.0;
    } else {
        t24 = t4 * t4;
        t44 = t24 * t24;
        g4 = grad4(perm[ii+1+perm[jj+1+perm[kk+1+perm[ll+1]]]]);
        n4 = t44 * dot( g4, v4 );
    }

    noise = 27.0 * (n0 + n1 + n2 + n3 + n4);  

    d  = t20 * t0 * dot(g0,v0) * v0;
    d += t21 * t1 * dot(g1,v1) * v1;
    d += t22 * t2 * dot(g2,v2) * v2;
    d += t23 * t3 * dot(g3,v3) * v3;
    d += t24 * t4 * dot(g4,v4) * v4;
    d *= -8.0;

    d.x += t40 * g0.x + t41 * g1.x + t42 * g2.x + t43 * g3.x + t44 * g4.x;
    d.y += t40 * g0.y + t41 * g1.y + t42 * g2.y + t43 * g3.y + t44 * g4.y;
    d.z += t40 * g0.z + t41 * g1.z + t42 * g2.z + t43 * g3.z + t44 * g4.z;
    d.w += t40 * g0.w + t41 * g1.w + t42 * g2.w + t43 * g3.w + t44 * g4.w;

    d *= 28.0;
  
    return noise;
      
}